import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BotCommand
import asyncio
import logging

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)



class Database:
    def __init__(self, db_path='HELPER.db'):
        self.db_path = db_path
        self.conn = None

    async def connect(self):
        try:
            self.conn = sqlite3.connect(self.db_path)
            await self._create_tables()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

    async def _create_tables(self):
        cursor = self.conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É responses (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS responses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message_text TEXT,
                response_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)
        
        self.conn.commit()
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def save_response(self, user: types.User, message_text: str):
        try:
            cursor = self.conn.cursor()
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                INSERT OR REPLACE INTO users (user_id, username, full_name)
                VALUES (?, ?, ?)
            """, (user.id, user.username, user.full_name))
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            cursor.execute("""
                INSERT INTO responses (user_id, message_text)
                VALUES (?, ?)
            """, (user.id, message_text))
            
            self.conn.commit()
            logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.full_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
        

class Database1:
    def __init__(self, db_path='DEEDBACKER.db'):
        self.db_path = db_path
        self.conn = None

    async def connect(self):
        try:
            self.conn = sqlite3.connect(self.db_path)
            await self._create_tables()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

    async def _create_tables(self):
        cursor = self.conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É responses (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS responses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message_text TEXT,
                response_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)
        
        self.conn.commit()
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def save_response1(self, user: types.User, message_text: str):
        try:
            cursor = self.conn.cursor()
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                INSERT OR REPLACE INTO users (user_id, username, full_name)
                VALUES (?, ?, ?)
            """, (user.id, user.username, user.full_name))
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            cursor.execute("""
                INSERT INTO responses (user_id, message_text)
                VALUES (?, ?)
            """, (user.id, message_text))
            
            self.conn.commit()
            logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.full_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False






set_comand = {
    BotCommand(command = 'help', description='–ü–æ–¥–¥–µ—Ä–∂–∫–∞'),
    BotCommand(command = 'feedback', description='–ü–æ–¥–µ–ª–∏—Å—å –º–Ω–µ–Ω–∏–µ–º')
}
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
from config import TOKEN
bot = Bot(token=TOKEN)
dp = Dispatcher()
db = Database()  # –ü—É—Ç—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å: Database('path/to/database.db')
db1 = Database1()

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç HR –∞—Å–∏—Å—Ç–µ–Ω—Ç")


class Form(StatesGroup):
    waiting_for_question = State()
    waiting_for_feedback = State()

@dp.message(Command("help"))
async def help_cmd(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_question)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

@dp.message(Command("feedback"))
async def feedback_cmd(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_feedback)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ:")

@dp.message(Form.waiting_for_question)
async def save_question(message: types.Message, state: FSMContext):
    await state.clear()
    if await db.save_response(message.from_user, message.text):
        await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å")

@dp.message(Form.waiting_for_feedback)
async def save_feedback(message: types.Message, state: FSMContext):
    await state.clear()
    if await db1.save_response1(message.from_user, message.text):
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")















async def set_comands(bot: Bot):
    await bot.set_my_commands(set_comand)


async def main():
    await db.connect()  # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î!
    await db1.connect()
    await set_comands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())